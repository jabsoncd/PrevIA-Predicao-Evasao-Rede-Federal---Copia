import streamlit as st
from PIL import Image
import pandas as pd
import lightgbm as lgb
import pickle
import os
import base64 


# Fun√ß√£o para converter imagem local em Base64


def get_base64_of_image(image_path):
    with open(image_path, "rb") as image_file:
        return base64.b64encode(image_file.read()).decode()


# Converter a imagem local
img_base64 = get_base64_of_image("templates/simulador.jpg")

st.set_page_config(
    page_title="Plataforma PrevIA",
    page_icon="previa_azulmenor.png",
    initial_sidebar_state="collapsed"
)

# Ocultar barra streamlit
hide_st_style = """
    <style>:
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    header {visibility: hidden;}
    </style>
    """
st.markdown(hide_st_style, unsafe_allow_html=True)
# üîπ CSS para definir a imagem de fundo
st.markdown(
    f"""
    <style>
    .stApp {{
        background-image: url("data:image/jpg;base64,{img_base64}");
        background-size: 100%;
        background-position: center;
        background-attachment: fixed;
    }}
    </style>
    """,
    unsafe_allow_html=True
)

# Fun√ß√£o para carregar o modelo


@st.cache_resource
def load_model():
    # modelo_lightgbm_220325.pkl
    # modelo_catboost_categorico_campeao.pkl ou modelo_lightgbm_220325.pkl
    model_path = os.path.join(
        "notebooks", "modelo_catboost_categorico_campeao.pkl") 
    with open(model_path, "rb") as file:
        model = pickle.load(file)
    return model


# Carregar o modelo treinado
model = load_model()

# T√≠tulo do painel
st.image("images/previa_gemini.png", width=200)
st.markdown("<h2 style='text-align: center; color: #12125c;'>Intelig√™ncia Artificial para Predi√ß√£o da Evas√£o na Rede Federal EPCT</h2>", unsafe_allow_html=True)
st.markdown("<p style='text-align: center; color: #1e1e8f;'>Plataforma para an√°lise do comportamento da evas√£o na RFEPCT.</p>", unsafe_allow_html=True)
st.markdown("---")

# üîπ Texto introdut√≥rio centralizado
st.markdown("<p style='text-align: center; color: #3f3f4f; margin-top: 0px;'>Ol√°! Fa√ßa agora a sua simula√ß√£o e descubra a probabilidade de evas√£o em um curso t√©cnico da Rede Federal EPCT. Nossa plataforma utiliza um modelo avan√ßado de aprendizado de m√°quina treinado com dados hist√≥ricos de matr√≠culas de estudantes para analisar padr√µes e prever a chance de perman√™ncia ou evas√£o no curso. Essa ferramenta pode ajud√°-lo a tomar decis√µes mais informadas, seja para o seu pr√≥prio percurso acad√™mico ou para apoiar algu√©m que est√° considerando ingressar em um curso t√©cnico. Experimente e veja as possibilidades! </p>", unsafe_allow_html=True)
# Linha divis√≥ria
st.write("---")

# Bot√£o para voltar √† p√°gina Home.py
st.markdown(
    """
    <style>
        .botao-voltar {
            position: absolute;
            top: 10px;
            left: 10px;
            background-color: #004A99; /* Azul escuro */
            color: white !important;
            padding: 10px 20px;
            border-radius: 5px;
            text-decoration: none;
            font-size: 16px;
            font-weight: bold;
            border: none;
            display: inline-block;
            text-align: center;
            cursor: pointer;
        }
        .botao-voltar:hover {
            background-color: #003366; /* Azul mais escuro no hover */
        }
    </style>
    <a class="botao-voltar" href="/Home_Eficiencia" target="_self">Voltar para Home</a>
    """,
    unsafe_allow_html=True
)


st.write(" ")
st.write(" ")
st.write(" ")


st.header("Simulador de Evas√£o em Cursos T√©cnicos")


st.subheader("Dados da Institui√ß√£o")
# Sele√ß√£o de Regi√£o e Estado
# regioes = {
#     "regiao_Regi√£o_Norte": ["AC", "AM", "AP", "PA", "TO", "RO", "RR"],
#     "regiao_Regi√£o_Nordeste": ["AL", "BA", "CE", "MA", "PB", "PE", "PI", "RN", "SE"],
#     "regiao_Regi√£o_Centro_Oeste": ["DF", "GO", "MS", "MT"],
#     "regiao_Regi√£o_Sudeste": ["ES", "MG", "RJ", "SP"],
#     "regiao_Regi√£o_Sul": ["PR", "SC", "RS"]
# }

# Dicion√°rio com regi√µes, UFs e institui√ß√µes federais
regioes = {
    "Norte": {
        "AC": ["Instituto Federal do Acre"],
        "AM": ["Instituto Federal do Amazonas", ],
        "AP": ["Instituto Federal do Amap√°"],
        "PA": ["Instituto Federal do Par√°", "Escola de M√∫sica da UFPA", "ETDUFPA"],
        "RO": ["Instituto Federal de Rond√¥nia"],
        "RR": ["Instituto Federal de Roraima", "Escola Agrot√©cnica da UFRR"],
        "TO": ["Instituto Federal do Tocantins"]
    },
    "Nordeste": {
        "AL": ["Instituto Federal de Alagoas", "Escola T√©cnica de Artes da UFAL"],
        "BA": ["Instituto Federal da Bahia", "Instituto Federal Baiano"],
        "CE": ["Instituto Federal do Cear√°"],
        "MA": ["Instituto Federal do Maranh√£o", "Col√©gio Universit√°rio da UFMA"],
        "PB": ["Instituto Federal da Para√≠ba", "Escola T√©cnica de Sa√∫de de Cajazeiras da UFCG", "Col√©gio Agr√≠cola Vidal de Negreiros da UFPB", "UFPB-ESTES"],
        "PE": ["Instituto Federal de Pernambuco", "Instituto Federal do Sert√£o Pernambucano", "Col√©gio Agr√≠cola Dom Agostinho Ikas da UFRPE"],
        "PI": ["Instituto Federal do Piau√≠", "Col√©gio T√©cnico de Teresina da UFPI", "Col√©gio T√©cnico de Bom Jesus da UFPI", "Col√©gio T√©cnico de Floriano da UFPI"],
        "RN": ["Instituto Federal do Rio Grande do Norte", "Escola de Sa√∫de da UFRN", "Escola Agr√≠cola de Jundia√≠ da UFRN", "Escola de M√∫sica da UFRN"],
        "SE": ["Instituto Federal de Sergipe"]
    },
    "Centro-Oeste": {
        "DF": ["Instituto Federal de Bras√≠lia"],
        "GO": ["Instituto Federal de Goi√°s", "Instituto Federal Goiano"],
        "MS": ["Instituto Federal do Mato Grosso do Sul"],
        "MT": ["Instituto Federal do Mato Grosso"]
    },
    "Sudeste": {
        "ES": ["Instituto Federal do Esp√≠rito Santo"],
        "MG": ["Instituto Federal de Minas Gerais", "Instituto Federal do Tri√¢ngulo Mineiro", "Instituto Federal do Norte de Minas Gerais", "Instituto Federal do Sul de Minas Gerais", "Instituto Federal do Sudeste de Minas Gerais", "Centro Federal de Educa√ß√£o Tecnol√≥gica de Minas Gerais", "Col√©gio T√©cnico da UFMG", "Teatro Universit√°rio da UFMG", "Escola T√©cnica de Sa√∫de da UFU", "Centro de Ensino e Desenvolvimento Agr√°rio da UFV", "UFTM-CEFORES"],
        "RJ": ["Instituto Federal do Rio de Janeiro", "Instituto Federal Fluminense", "Centro Federal de Educa√ß√£o Tecnol√≥gica Celso Suckow da Fonseca", "Col√©gio Pedro II", "Col√©gio T√©cnico da UFRRJ"],
        "SP": ["Instituto Federal de S√£o Paulo"]
    },
    "Sul": {
        "PR": ["Instituto Federal do Paran√°"],
        "SC": ["Instituto Federal de Santa Catarina", "Instituto Federal Catarinense"],
        "RS": ["Instituto Federal do Rio Grande do Sul", "Instituto Federal Sul-rio-grandense", "Instituto Federal Farroupilha", "Col√©gio T√©cnico Industrial da UFSM", "Col√©gio Polit√©cnico da UFSM"]
    }
}

regiao_escolhida = st.selectbox("Regi√£o", ["Selecione uma regi√£o"] + list(
    regioes.keys()), help="Selecione a Regi√£o que estuda ou deseja estudar.")

# Se o usu√°rio n√£o escolher uma regi√£o v√°lida, exibir mensagem de erro
if regiao_escolhida == "Selecione uma regi√£o":
    st.markdown(
        """
    <div style="
        border-radius: 5px; 
        color: red; 
        background-color: white;
        display: inline-block;">
        *selecione selecione primeiro uma Regi√£o.
        <p>
    </div>
    """,
        unsafe_allow_html=True
    )


# Se uma regi√£o for escolhida, listar os estados (UFs) dessa regi√£o
if regiao_escolhida != "Selecione uma regi√£o":
    estado_opcoes = ["Selecione um Estado"] + \
        list(regioes[regiao_escolhida].keys())
else:
    estado_opcoes = ["Selecione um Estado"]

estado_escolhido = st.selectbox("Estado:", estado_opcoes,
                                index=0,
                                help="Selecione o Estado que estuda ou deseja estudar.")

# Se uma UF for escolhida, listar as institui√ß√µes dessa UF
if estado_escolhido != "Selecione um Estado":
    instituicao_opcoes = ["Selecione uma Institui√ß√£o"] + \
        regioes[regiao_escolhida][estado_escolhido]
else:
    instituicao_opcoes = ["Selecione uma Institui√ß√£o"]

instituicao_escolhida = st.selectbox("Institui√ß√£o:", instituicao_opcoes,
                                     index=0,
                                     help="Selecione a Institui√ß√£o que estuda ou deseja estudar.")

regi√£o_metropolina_ue = st.radio("A unidade de ensino est√° localizada em regi√£o metropolitana?", [
    "SIM", "N√ÉO"], help="Informe essa a Institui√ß√£o que estuda ou deseja estudar fica em regi√£o metropolitana da cidade.")

# Dados Pessoais
st.subheader("Dados Pessoais")
sexo = st.selectbox("Informe seu G√™nero:", [
    "Masculino", "Feminino"], placeholder="Escolha uma op√ß√£o.")
idade = st.slider("Informe sua Idade:", min_value=14,
                  max_value=100, value=14, step=1)
cor_raca = st.selectbox("Informe sua Cor/Ra√ßa:", ["Branca", "Preta", "Parda", "Amarela",
                                                  "Ind√≠gena", "N√£o declarada"], placeholder="Escolha uma op√ß√£o.", help="Informe sua cor/ra√ßa")
renda_familiar = st.selectbox("Informe sua Renda Familiar Per capita:", [
                              "0<RFP<=0,5", "0,5<RFP<=1", "1<RFP<=1,5", "1,5<RFP<=2,5", "2,5<RFP<=3,5", "RFP>3,5", "N√£o declarada"], placeholder="Escolha uma op√ß√£o.", help="Informe a renda familiar por pessoa.")

# Dados do Curso
st.subheader("Dados do Curso")


# # Defini√ß√£o de eixos tecnologicos
# eixos = {
#     "eixo_tecnologico_Ambiente_e_Sa√∫de",
#     "eixo_tecnologico_Controle_e_Processos_Industriais",
#     "eixo_tecnologico_Desenvolvimento_Educacional_e_Social",
#     "eixo_tecnologico_Gest√£o_e_Neg√≥cios",
#     "eixo_tecnologico_Informa√ß√£o_e_Comunica√ß√£o",
#     "eixo_tecnologico_Infraestrutura",
#     "eixo_tecnologico_Produ√ß√£o_Aliment√≠cia",
#     "eixo_tecnologico_Produ√ß√£o_Cultural_e_Design",
#     "eixo_tecnologico_Produ√ß√£o_Industrial",
#     "eixo_tecnologico_Recursos_Naturais",
#     "eixo_tecnologico_Seguran√ßa",
#     "eixo_tecnologico_Militar",
#     "eixo_tecnologico_Turismo__Hospitalidade_e_Lazer"
# }
# Dicion√°rio para renomear os Eixos Tecnol√≥gicos
mapeamento_eixos = {
    "Ambiente e Sa√∫de": "Ambiente e Sa√∫de",
    "Controle e Processos Industriais": "Controle e Processos Industriais",
    "Desenvolvimento Educacional e Social": "Desenvolvimento Educacional e Social",
    "Gest√£o e Neg√≥cios": "Gest√£o e Neg√≥cios",
    "Informa√ß√£o e Comunica√ß√£o": "Informa√ß√£o e Comunica√ß√£o",
    "Infraestrutura": "Infraestrutura",
    "Produ√ß√£o Aliment√≠cia": "Produ√ß√£o Aliment√≠cia",
    "Produ√ß√£o Cultural e Design": "Produ√ß√£o Cultural e Design",
    "Produ√ß√£o Industrial": "Produ√ß√£o Industrial",
    "Recursos Naturais": "Recursos Naturais",
    "Seguran√ßa": "Seguran√ßa",
    "Militar": "Militar",
    "Turismo, Hospitalidade e Lazer": "Turismo, Hospitalidade e Lazer"
}

# Carregar os dados


def carregar_dados():
    # '../artifacts/cnct2025.xlsx' ou cnct2025_base_eficiencia.xlsx
    file_path = 'artifacts/cnct2025v1.xlsx'
    df = pd.read_excel(file_path, sheet_name="Plan1", engine="openpyxl")
    return df


df = carregar_dados()


# Aplicar o mapeamento no DataFrame
df["Eixo_Tecnologico_Mapeado"] = df["eixo_tecnologico"].map(mapeamento_eixos)

# Obter Eixos Tecnol√≥gicos √∫nicos (mapeados)
eixos_mapeados = sorted(df["Eixo_Tecnologico_Mapeado"].dropna().unique())

# Selecionar Eixo Tecnol√≥gico (com op√ß√£o fixa "Selecione um Eixo Tecnol√≥gico")
eixo_opcoes = ["Selecione um Eixo Tecnol√≥gico"] + eixos_mapeados
eixo_tecnologico_escolhido = st.selectbox(
    "Informe o Eixo Tecnol√≥gico:",
    eixo_opcoes,
    index=0,  # Mant√©m "Selecione um Eixo Tecnol√≥gico" como padr√£o
    help="Selecione o Eixo Tecnol√≥gico do Curso T√©cnico que estuda ou deseja cursar."
)


# Se o usu√°rio n√£o escolher um eixo v√°lido, exibir mensagem de erro
if eixo_tecnologico_escolhido == "Selecione um Eixo Tecnol√≥gico":
    st.markdown(
        """
    <div style="
        border-radius: 5px; 
        color: red; 
        background-color: white;
        display: inline-block;">
        *selecione primeiro um Eixo Tecnol√≥gico.
        <p>
    </div>
    """,
        unsafe_allow_html=True
    )

# Inicializa lista de cursos
cursos = ["Selecione um Curso T√©cnico"]

# Filtrar cursos apenas se um eixo v√°lido for escolhido
if eixo_tecnologico_escolhido != "Selecione um Eixo Tecnol√≥gico":
    df_filtrado = df[df["Eixo_Tecnologico_Mapeado"]
                     == eixo_tecnologico_escolhido]
    cursos += sorted(df_filtrado["nome_de_curso"].unique())

# Selecionar Curso T√©cnico (com op√ß√£o fixa "Selecione um Curso T√©cnico")
nome_de_curso = st.selectbox(
    "Nome do curso t√©cnico:",
    cursos,
    index=0,  # Mant√©m "Selecione um Curso T√©cnico" como padr√£o
    help="Selecione o Curso T√©cnico que estuda ou deseja cursar."
)

# Se o usu√°rio n√£o escolher um curso v√°lido, exibir mensagem de erro
# if nome_curso == "Selecione um Curso T√©cnico":
#     st.error("‚ö†Ô∏è Por favor, selecione um Curso T√©cnico.")

# Inicializa a carga hor√°ria m√≠nima
carga_horaria_minima = 0

# Exibir carga hor√°ria apenas se um curso v√°lido for selecionado
if nome_de_curso != "Selecione um Curso T√©cnico":
    carga_horaria_minima = df_filtrado[df_filtrado["nome_de_curso"]
                                       == nome_de_curso]["carga_horaria_minima"].values[0]

# Exibir carga hor√°ria m√≠nima (desabilitado)
st.text_input("Carga Hor√°ria", carga_horaria_minima, disabled=True,
              help="A Carga hor√°ria do Curso t√©cnico √© baseada na carga m√≠nima do CNCT.")

modalidade_de_ensino = st.selectbox("Modalidade de ensino:", [
    "Educa√ß√£o a Dist√¢ncia", "Educa√ß√£o Presencial"], placeholder="Escolha uma op√ß√£o.", help="Informe se o curso t√©cnico de que estuda ou deseja cursar √© Presencial ao EaD.")
tipo_de_oferta = st.selectbox("Tipo de oferta:", ["Concomitante", "Integrado", "Subsequente", "PROEJA - Concomitante", "PROEJA - Integrado", "PROEJA - Subsequente"], placeholder="Escolha uma op√ß√£o.",
                              help="Informe se o curso t√©cnico de que estuda ou deseja cursar √© Subsequente ao ensino m√©dio, ser√° cursado junto com o Ensino m√©dio ou Integrado ao ensino m√©dio.")
turno = st.selectbox("Turno do curso:", ["Integral", "Matutino", "Vespertino", "Noturno", "N√£o se aplica"], placeholder="Escolha uma op√ß√£o.",
                     help="Informe se o curso t√©cnico de que estuda ou deseja cursar √©/ser√° realizado no turno Matutino, Vespertino, Noturno ou Integrado.")


# Bot√£o para submeter
submit = st.button("üîé Prever Evas√£o")

# **Valida√ß√£o Completa Antes de Processar**
if submit:
    erros = []

    if regiao_escolhida == "Selecione uma regi√£o":
        erros.append("‚ö†Ô∏è Por favor, selecione uma **Regi√£o**.")
    if estado_escolhido == "Selecione um Estado":
        erros.append("‚ö†Ô∏è Por favor, selecione um **Estado**.")
    if instituicao_escolhida == "Selecione uma Institui√ß√£o":
        erros.append("‚ö†Ô∏è Por favor, selecione uma **Institui√ß√£o**.")
    if eixo_tecnologico_escolhido == "Selecione um Eixo Tecnol√≥gico":
        erros.append("‚ö†Ô∏è Por favor, selecione um **Eixo Tecnol√≥gico**.")
    if nome_de_curso == "Selecione um Curso T√©cnico":
        erros.append("‚ö†Ô∏è Por favor, selecione um **Curso T√©cnico**.")
    if carga_horaria_minima == 0:
        erros.append(
            "‚ö†Ô∏è A **Carga Hor√°ria** deve ser maior que 0. Por favor, selecione um valor v√°lido.")
    if modalidade_de_ensino == "Selecione":
        erros.append("‚ö†Ô∏è Por favor, selecione a **Modalidade de Ensino**.")
    if tipo_de_oferta == "Selecione":
        erros.append("‚ö†Ô∏è Por favor, selecione o **Tipo de Oferta**.")
    if turno == "Selecione":
        erros.append("‚ö†Ô∏è Por favor, selecione o **Turno do Curso**.")

    if erros:
        for erro in erros:
            st.error(erro)
    else:
        # # Se n√£o houver erros, realiza o processamento dos dados
        # # Criando as colunas das regi√µes (1 para escolhida, 0 para as outras)
        # regioes_dummies = {regiao: 1 if regiao ==
        #                    regiao_escolhida else 0 for regiao in regioes}

        # # Eixo Tecnologico
        # eixos_tecnologico_dumies = {eixo_tecnologico: 1 if eixo_tecnologico ==
        #                             eixo_tecnologico_escolhido else 0 for eixo_tecnologico in eixos_mapeados}

        #  # Instituicao
        # instituicao_dumies = {instituicao_escolhida: 1 if instituicao_escolhida ==
        #                             instituicao_escolhida else 0 for instituicao in instituicao_escolhida}

        #          # Instituicao
        # nome_de_curso_dumies = {nome_de_curso: 1 if nome_de_curso ==
        #                             nome_de_curso else 0 for nome_de_curso in nome_de_curso}

        # Criando o DataFrame de entrada
        input_data = pd.DataFrame({
            "cor_raca": ["AmarelaBranca" if cor_raca in ["Amarela", "Branca"] else cor_raca],
            "idade": [int(idade)],
            "sexo": (sexo),
            "renda_familiar": (renda_familiar),
            "modalidade_de_ensino": (modalidade_de_ensino),
            "tipo_de_oferta": (tipo_de_oferta),
            "turno": (turno),
            "nome_de_curso": (nome_de_curso),
            "eixo_tecnologico": (eixo_tecnologico_escolhido),
            "carga_horaria_minima": [int(carga_horaria_minima)],
            "uf": (estado_escolhido),
            "regiao": (regiao_escolhida),
            "instituicao": (instituicao_escolhida),
            "regi√£o_metropolina_ue": (regi√£o_metropolina_ue)
        })
        # # Criando o DataFrame de entrada
        # input_data = pd.DataFrame({
        #     "idade": [int(idade)],
        #     "carga_horaria_minima": [int(carga_horaria_minima)],
        #     "renda_familiar": [
        #         1 if renda_familiar == "0<RFP<=0,5" else
        #         2 if renda_familiar == "0,5<RFP<=1,0" else
        #         3 if renda_familiar == "1,0<RFP<=1,5" else
        #         4 if renda_familiar == "1,5<RFP<=2,5" else
        #         5 if renda_familiar == "2,5<RFP<=3,5" else
        #         6 if renda_familiar == "RFP>3,5" else
        #         None  # Para garantir que o valor ser√° None se n√£o corresponder a nenhum crit√©rio
        #     ],
        #     "cor_raca_": [if cor_raca in ["Amarela", "Branca"] else ["AmarelaBranca"]],
        #     "sexo_Masculino": [1 if sexo_Masculino == "Masculino" else 0],
        #     "modalidade_de_ensino_Educa√ß√£o_Presencial": [1 if modalidade_de_ensino_Educa√ß√£o_Presencial == "Presencial" else 0],
        #     "tipo_de_oferta_Integrado": [1 if tipo_de_oferta_Integrado == "Integrado" else 0],
        #     "turno_Noturno": [1 if turno_Noturno == "Noturno" else 0],
        #     **eixos_tecnologico_dumies,  # Adiciona as colunas de eixos tecnol√≥gicos ao DataFrame
        #     **regioes_dummies,  # Adiciona as colunas de regi√£o ao DataFrame
        #     **instituicao_dumies,
        #     "regi√£o_metropolina_ue_SIM": [1 if regi√£o_metropolina_ue_SIM == "Sim" else 0]
        # })

        st.subheader("üìã Simula√ß√µes Realizadas")
        if "input_data" in st.session_state:
            st.session_state.input_data = pd.concat(
                [st.session_state.input_data, input_data], ignore_index=True)
        else:
            st.session_state.input_data = input_data

        st.write(st.session_state.input_data)

        # Exibe as colunas do modelo e as colunas do input_data
        print("Colunas do modelo:", model.feature_names_)
        print("Colunas do input_data:", input_data.columns.tolist())

        # Bot√£o para limpar as simula√ß√µes
        if st.button("Limpar Simula√ß√µes"):
            # Limpa os dados de 'input_data' no session_state
            st.session_state.input_data = pd.DataFrame()  # Reseta para um DataFrame vazio
            st.write("Simula√ß√µes limpas com sucesso!")

        # C√≥digo para realizar a previs√£o aqui, se n√£o houver erros
        st.success("Processando a previs√£o de evas√£o...")

        # Predi√ß√£o
        probabilidades = model.predict_proba(input_data)[0]
        prob_nao_evasao = probabilidades[0]  # Probabilidade de N√ÉO EVADIR
        prob_evasao = probabilidades[1]  # Probabilidade de EVADIR

        import plotly.graph_objects as go
        import time

        valor_final = round(prob_evasao * 100, 2)
        # Criar espa√ßo para o gr√°fico
        chart_placeholder = st.empty()

        # Anima√ß√£o do ponteiro do veloc√≠metro
        for valor_final in range(0, int(round(valor_final * 1, 2,)) + 1, 1):  # Atualiza a cada 5%
            # Convertendo para float com 2 casas decimais
            valor_final_float = valor_final
            fig = go.Figure(go.Indicator(
                mode="gauge+number",
                value=valor_final_float,
                number={'valueformat': '.f', 'suffix': "%",
                        'font': {'size': 45, 'color': '#2C3E50'}},
                title={'text': "Probabilidade de Evas√£o (%)", 'font': {
                    'size': 20, 'color': '#2C3E50'}},
                gauge={
                    'axis': {'range': [0, 100], 'tickwidth': 2, 'tickcolor': "#7f8c8d"},
                    'bar': {'color': "#2C3E50"},  # Cor do ponteiro
                    'steps': [
                        # Verde moderno
                        {'range': [0, 40], 'color': "#27AE60"},
                        # Amarelo vibrante
                        {'range': [40, 70], 'color': "#F1C40F"},
                        # Vermelho marcante
                        {'range': [70, 100], 'color': "#E74C3C"}
                    ],
                    'threshold': {
                        'line': {'color': "red", 'width': 4},
                        'thickness': 0.85,
                        'value': valor_final_float
                    }
                }
            ))

            # Layout moderno
            fig.update_layout(
                margin=dict(l=20, r=40, t=10, b=20),
                paper_bgcolor="#f2f4f5",
                font=dict(color="#2c3e50", family="Arial")
            )

            # Atualiza o gr√°fico na tela
            chart_placeholder.plotly_chart(fig)

            # Pausa para criar o efeito de transi√ß√£o
            time.sleep(0.1)  # Ajuste esse tempo para controlar a velocidade

        # Definir categorias de risco com base na probabilidade de evas√£o
        if prob_evasao < 0.50:
            st.success(
                f"‚úÖ Baixa probabilidade de evas√£o. (N√£o evade: {prob_nao_evasao:.2%})")
            imagem = Image.open("templates/n_evade.jpg")
            legenda = "Estudante aliviado por n√£o evadir"

        elif 0.51 <= prob_evasao <= 0.60:
            st.warning(
                f"‚ö†Ô∏è Moderada chance de evas√£o. (Evade: {prob_evasao:.2%})")
            imagem = Image.open("templates/moderada.jpg")
            legenda = "Estudante com d√∫vidas sobre continuar o curso"

        elif 0.61 <= prob_evasao <= 0.70:
            st.warning(
                f"‚ö†Ô∏è Consider√°vel probabilidade de evas√£o. (Evade: {prob_evasao:.2%})")
            imagem = Image.open("templates/evade1.jpg")
            legenda = "Estudante em risco moderado de evas√£o"

        elif 0.71 <= prob_evasao <= 0.90:
            st.error(f"‚ö†Ô∏è Alta chance de evas√£o! (Evade: {prob_evasao:.2%})")
            imagem = Image.open("templates/alta.jpg")
            legenda = "Estudante preocupado com a evas√£o"

        else:  # 0.91 a 1.00
            st.error(
                f"üö® Muito alta chance de evas√£o! (Evade: {prob_evasao:.2%})")
            imagem = Image.open("templates/evade.jpg")
            legenda = "Estudante com grande risco de abandonar o curso"

        # Exibir os resultados
        st.subheader("üìä Resultados da Predi√ß√£o")
        st.write(f"üîµ Probabilidade de **N√ÉO EVADIR**: {prob_nao_evasao:.2%}")
        st.write(f"üî¥ Probabilidade de **EVADIR**: {prob_evasao:.2%}")
        # Exibir a imagem correspondente
        st.image(imagem, caption=legenda)  # use_container_width=True


st.markdown("<hr style='border: 1px solid white;'>", unsafe_allow_html=True)
st.markdown("<p style='color: white;'>Vers√£o 0.0.1 - Bras√≠lia - 2025. Universidade Federal do Tocantins - UFT.</p>", unsafe_allow_html=True) 
